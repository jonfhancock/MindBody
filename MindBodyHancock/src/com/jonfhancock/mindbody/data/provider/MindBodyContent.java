package com.jonfhancock.mindbody.data.provider;

import android.content.ContentValues;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.net.Uri;
import android.provider.BaseColumns;
import android.util.Log;

import com.jonfhancock.mindbody.data.provider.util.ColumnMetadata;

/**
 * This class was generated by the ContentProviderCodeGenerator project made by Foxykeep
 * <p>
 * (More information available https://github.com/foxykeep/ContentProviderCodeGenerator)
 */
public abstract class MindBodyContent {

    public static final Uri CONTENT_URI = Uri.parse("content://" + MindBodyProvider.AUTHORITY);

    private MindBodyContent() {
    }

    /**
     * Created in version 1
     */
    public static final class Staff extends MindBodyContent {

        private static final String LOG_TAG = Staff.class.getSimpleName();

        public static final String TABLE_NAME = "staff";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/mindbody-staff";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/mindbody-staff";

        public static final Uri CONTENT_URI = Uri.parse(MindBodyContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            FIRST_NAME("firstName", "text"),
            LAST_NAME("lastName", "text"),
            MALE("male", "integer"),
            HOME_PHONE("homePhone", "text"),
            MOBILE_PHONE("mobilePhone", "text"),
            IMAGE_URL("imageUrl", "text"),
            CITY("city", "text"),
            BIO("bio", "text"),
            COUNTRY("country", "text"),
            STATE("state", "text"),
            NAME("name", "text"),
            POSTAL_CODE("postalCode", "text"),
            ADDRESS("address", "text"),
            EMAIL("email", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.ID.getName(),
                Columns.FIRST_NAME.getName(),
                Columns.LAST_NAME.getName(),
                Columns.MALE.getName(),
                Columns.HOME_PHONE.getName(),
                Columns.MOBILE_PHONE.getName(),
                Columns.IMAGE_URL.getName(),
                Columns.CITY.getName(),
                Columns.BIO.getName(),
                Columns.COUNTRY.getName(),
                Columns.STATE.getName(),
                Columns.NAME.getName(),
                Columns.POSTAL_CODE.getName(),
                Columns.ADDRESS.getName(),
                Columns.EMAIL.getName()
        };

        private Staff() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (MindBodyProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Staff | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.FIRST_NAME.getName() + " " + Columns.FIRST_NAME.getType() + ", " + Columns.LAST_NAME.getName() + " " + Columns.LAST_NAME.getType() + ", " + Columns.MALE.getName() + " " + Columns.MALE.getType() + ", " + Columns.HOME_PHONE.getName() + " " + Columns.HOME_PHONE.getType() + ", " + Columns.MOBILE_PHONE.getName() + " " + Columns.MOBILE_PHONE.getType() + ", " + Columns.IMAGE_URL.getName() + " " + Columns.IMAGE_URL.getType() + ", " + Columns.CITY.getName() + " " + Columns.CITY.getType() + ", " + Columns.BIO.getName() + " " + Columns.BIO.getType() + ", " + Columns.COUNTRY.getName() + " " + Columns.COUNTRY.getType() + ", " + Columns.STATE.getName() + " " + Columns.STATE.getType() + ", " + Columns.NAME.getName() + " " + Columns.NAME.getType() + ", " + Columns.POSTAL_CODE.getName() + " " + Columns.POSTAL_CODE.getType() + ", " + Columns.ADDRESS.getName() + " " + Columns.ADDRESS.getType() + ", " + Columns.EMAIL.getName() + " " + Columns.EMAIL.getType() + ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX staff_firstName on " + TABLE_NAME + "(" + Columns.FIRST_NAME.getName() + ");");
            db.execSQL("CREATE INDEX staff_lastName on " + TABLE_NAME + "(" + Columns.LAST_NAME.getName() + ");");
            if (MindBodyProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Staff | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (MindBodyProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Staff | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (MindBodyProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Staff | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.ID.getName()).append(", ").append(Columns.FIRST_NAME.getName()).append(", ").append(Columns.LAST_NAME.getName()).append(", ").append(Columns.MALE.getName()).append(", ").append(Columns.HOME_PHONE.getName()).append(", ").append(Columns.MOBILE_PHONE.getName()).append(", ").append(Columns.IMAGE_URL.getName()).append(", ").append(Columns.CITY.getName()).append(", ").append(Columns.BIO.getName()).append(", ").append(Columns.COUNTRY.getName()).append(", ").append(Columns.STATE.getName()).append(", ").append(Columns.NAME.getName()).append(", ").append(Columns.POSTAL_CODE.getName()).append(", ").append(Columns.ADDRESS.getName()).append(", ").append(Columns.EMAIL.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.ID.getName()));
            value = values.getAsString(Columns.FIRST_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LAST_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.MALE.getName()));
            value = values.getAsString(Columns.HOME_PHONE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.MOBILE_PHONE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.IMAGE_URL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CITY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.BIO.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.COUNTRY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.STATE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.POSTAL_CODE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ADDRESS.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.EMAIL.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class Appointment extends MindBodyContent {

        private static final String LOG_TAG = Appointment.class.getSimpleName();

        public static final String TABLE_NAME = "appointment";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/mindbody-appointment";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/mindbody-appointment";

        public static final Uri CONTENT_URI = Uri.parse(MindBodyContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            STATUS("status", "text"),
            STAFF_REQUESTED("staffRequested", "text"),
            START_TIME("startTime", "text"),
            END_TIME("endTime", "text"),
            NOTES("notes", "text"),
            STAFF("staff", "integer"),
            FIRST_APPOINTMENT("firstAppointment", "integer"),
            RESOURCE("resource", "text"),
            CLIENT_IS_PROSPECT("client_is_prospect", "integer"),
            CLIENT_ID("client_id", "integer"),
            CLIENT_FIRST_NAME("client_firstName", "text"),
            CLIENT_LAST_NAME("client_lastName", "text"),
            CLIENT_FIRST_APPT_DATE("client_firstApptDate", "text"),
            LOCATION_TAX1("location_tax1", "integer"),
            LOCATION_TAX2("location_tax2", "integer"),
            LOCATION_TAX3("location_tax3", "integer"),
            LOCATION_TAX4("location_tax4", "integer"),
            LOCATION_TAX5("location_tax5", "integer"),
            LOCATION_TREAT_ROOM("location_treatRoom", "text"),
            LOCATION_HAS_CLASSES("location_hasClasses", "integer"),
            LOCATION_LONGITUDE("location_longitude", "integer"),
            LOCATION_LATITUDE("location_latitude", "integer"),
            LOCATION_SITE_ID("location_siteId", "integer"),
            LOCATION_ID("location_id", "integer"),
            LOCATION_SQFT("location_sqft", "integer"),
            LOCATION_NAME("location_name", "text"),
            PROGRAM_ID("program_id", "integer"),
            PROGRAM_NAME("program_name", "text"),
            PROGRAM_SCHED_TYPE("program_sched_type", "text"),
            SESSION_TYPE_ID("sessionType_id", "integer"),
            SESSION_TYPE_DEFAULT_TIME("sessionType_defaultTime", "integer"),
            SESSION_TYPE_PROGRAM_ID("sessionType_programId", "integer"),
            SESSION_TYPE_NAME("sessionType_name", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.ID.getName(),
                Columns.STATUS.getName(),
                Columns.STAFF_REQUESTED.getName(),
                Columns.START_TIME.getName(),
                Columns.END_TIME.getName(),
                Columns.NOTES.getName(),
                Columns.STAFF.getName(),
                Columns.FIRST_APPOINTMENT.getName(),
                Columns.RESOURCE.getName(),
                Columns.CLIENT_IS_PROSPECT.getName(),
                Columns.CLIENT_ID.getName(),
                Columns.CLIENT_FIRST_NAME.getName(),
                Columns.CLIENT_LAST_NAME.getName(),
                Columns.CLIENT_FIRST_APPT_DATE.getName(),
                Columns.LOCATION_TAX1.getName(),
                Columns.LOCATION_TAX2.getName(),
                Columns.LOCATION_TAX3.getName(),
                Columns.LOCATION_TAX4.getName(),
                Columns.LOCATION_TAX5.getName(),
                Columns.LOCATION_TREAT_ROOM.getName(),
                Columns.LOCATION_HAS_CLASSES.getName(),
                Columns.LOCATION_LONGITUDE.getName(),
                Columns.LOCATION_LATITUDE.getName(),
                Columns.LOCATION_SITE_ID.getName(),
                Columns.LOCATION_ID.getName(),
                Columns.LOCATION_SQFT.getName(),
                Columns.LOCATION_NAME.getName(),
                Columns.PROGRAM_ID.getName(),
                Columns.PROGRAM_NAME.getName(),
                Columns.PROGRAM_SCHED_TYPE.getName(),
                Columns.SESSION_TYPE_ID.getName(),
                Columns.SESSION_TYPE_DEFAULT_TIME.getName(),
                Columns.SESSION_TYPE_PROGRAM_ID.getName(),
                Columns.SESSION_TYPE_NAME.getName()
        };

        private Appointment() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (MindBodyProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Appointment | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.STATUS.getName() + " " + Columns.STATUS.getType() + ", " + Columns.STAFF_REQUESTED.getName() + " " + Columns.STAFF_REQUESTED.getType() + ", " + Columns.START_TIME.getName() + " " + Columns.START_TIME.getType() + ", " + Columns.END_TIME.getName() + " " + Columns.END_TIME.getType() + ", " + Columns.NOTES.getName() + " " + Columns.NOTES.getType() + ", " + Columns.STAFF.getName() + " " + Columns.STAFF.getType() + ", " + Columns.FIRST_APPOINTMENT.getName() + " " + Columns.FIRST_APPOINTMENT.getType() + ", " + Columns.RESOURCE.getName() + " " + Columns.RESOURCE.getType() + ", " + Columns.CLIENT_IS_PROSPECT.getName() + " " + Columns.CLIENT_IS_PROSPECT.getType() + ", " + Columns.CLIENT_ID.getName() + " " + Columns.CLIENT_ID.getType() + ", " + Columns.CLIENT_FIRST_NAME.getName() + " " + Columns.CLIENT_FIRST_NAME.getType() + ", " + Columns.CLIENT_LAST_NAME.getName() + " " + Columns.CLIENT_LAST_NAME.getType() + ", " + Columns.CLIENT_FIRST_APPT_DATE.getName() + " " + Columns.CLIENT_FIRST_APPT_DATE.getType() + ", " + Columns.LOCATION_TAX1.getName() + " " + Columns.LOCATION_TAX1.getType() + ", " + Columns.LOCATION_TAX2.getName() + " " + Columns.LOCATION_TAX2.getType() + ", " + Columns.LOCATION_TAX3.getName() + " " + Columns.LOCATION_TAX3.getType() + ", " + Columns.LOCATION_TAX4.getName() + " " + Columns.LOCATION_TAX4.getType() + ", " + Columns.LOCATION_TAX5.getName() + " " + Columns.LOCATION_TAX5.getType() + ", " + Columns.LOCATION_TREAT_ROOM.getName() + " " + Columns.LOCATION_TREAT_ROOM.getType() + ", " + Columns.LOCATION_HAS_CLASSES.getName() + " " + Columns.LOCATION_HAS_CLASSES.getType() + ", " + Columns.LOCATION_LONGITUDE.getName() + " " + Columns.LOCATION_LONGITUDE.getType() + ", " + Columns.LOCATION_LATITUDE.getName() + " " + Columns.LOCATION_LATITUDE.getType() + ", " + Columns.LOCATION_SITE_ID.getName() + " " + Columns.LOCATION_SITE_ID.getType() + ", " + Columns.LOCATION_ID.getName() + " " + Columns.LOCATION_ID.getType() + ", " + Columns.LOCATION_SQFT.getName() + " " + Columns.LOCATION_SQFT.getType() + ", " + Columns.LOCATION_NAME.getName() + " " + Columns.LOCATION_NAME.getType() + ", " + Columns.PROGRAM_ID.getName() + " " + Columns.PROGRAM_ID.getType() + ", " + Columns.PROGRAM_NAME.getName() + " " + Columns.PROGRAM_NAME.getType() + ", " + Columns.PROGRAM_SCHED_TYPE.getName() + " " + Columns.PROGRAM_SCHED_TYPE.getType() + ", " + Columns.SESSION_TYPE_ID.getName() + " " + Columns.SESSION_TYPE_ID.getType() + ", " + Columns.SESSION_TYPE_DEFAULT_TIME.getName() + " " + Columns.SESSION_TYPE_DEFAULT_TIME.getType() + ", " + Columns.SESSION_TYPE_PROGRAM_ID.getName() + " " + Columns.SESSION_TYPE_PROGRAM_ID.getType() + ", " + Columns.SESSION_TYPE_NAME.getName() + " " + Columns.SESSION_TYPE_NAME.getType() + ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX appointment_staff on " + TABLE_NAME + "(" + Columns.STAFF.getName() + ");");
            if (MindBodyProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Appointment | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (MindBodyProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Appointment | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (MindBodyProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Appointment | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.ID.getName()).append(", ").append(Columns.STATUS.getName()).append(", ").append(Columns.STAFF_REQUESTED.getName()).append(", ").append(Columns.START_TIME.getName()).append(", ").append(Columns.END_TIME.getName()).append(", ").append(Columns.NOTES.getName()).append(", ").append(Columns.STAFF.getName()).append(", ").append(Columns.FIRST_APPOINTMENT.getName()).append(", ").append(Columns.RESOURCE.getName()).append(", ").append(Columns.CLIENT_IS_PROSPECT.getName()).append(", ").append(Columns.CLIENT_ID.getName()).append(", ").append(Columns.CLIENT_FIRST_NAME.getName()).append(", ").append(Columns.CLIENT_LAST_NAME.getName()).append(", ").append(Columns.CLIENT_FIRST_APPT_DATE.getName()).append(", ").append(Columns.LOCATION_TAX1.getName()).append(", ").append(Columns.LOCATION_TAX2.getName()).append(", ").append(Columns.LOCATION_TAX3.getName()).append(", ").append(Columns.LOCATION_TAX4.getName()).append(", ").append(Columns.LOCATION_TAX5.getName()).append(", ").append(Columns.LOCATION_TREAT_ROOM.getName()).append(", ").append(Columns.LOCATION_HAS_CLASSES.getName()).append(", ").append(Columns.LOCATION_LONGITUDE.getName()).append(", ").append(Columns.LOCATION_LATITUDE.getName()).append(", ").append(Columns.LOCATION_SITE_ID.getName()).append(", ").append(Columns.LOCATION_ID.getName()).append(", ").append(Columns.LOCATION_SQFT.getName()).append(", ").append(Columns.LOCATION_NAME.getName()).append(", ").append(Columns.PROGRAM_ID.getName()).append(", ").append(Columns.PROGRAM_NAME.getName()).append(", ").append(Columns.PROGRAM_SCHED_TYPE.getName()).append(", ").append(Columns.SESSION_TYPE_ID.getName()).append(", ").append(Columns.SESSION_TYPE_DEFAULT_TIME.getName()).append(", ").append(Columns.SESSION_TYPE_PROGRAM_ID.getName()).append(", ").append(Columns.SESSION_TYPE_NAME.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.ID.getName()));
            value = values.getAsString(Columns.STATUS.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.STAFF_REQUESTED.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.START_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.END_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NOTES.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.STAFF.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FIRST_APPOINTMENT.getName()));
            value = values.getAsString(Columns.RESOURCE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.CLIENT_IS_PROSPECT.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.CLIENT_ID.getName()));
            value = values.getAsString(Columns.CLIENT_FIRST_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CLIENT_LAST_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CLIENT_FIRST_APPT_DATE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.LOCATION_TAX1.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LOCATION_TAX2.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LOCATION_TAX3.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LOCATION_TAX4.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LOCATION_TAX5.getName()));
            value = values.getAsString(Columns.LOCATION_TREAT_ROOM.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.LOCATION_HAS_CLASSES.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LOCATION_LONGITUDE.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LOCATION_LATITUDE.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LOCATION_SITE_ID.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LOCATION_ID.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.LOCATION_SQFT.getName()));
            value = values.getAsString(Columns.LOCATION_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.PROGRAM_ID.getName()));
            value = values.getAsString(Columns.PROGRAM_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PROGRAM_SCHED_TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.SESSION_TYPE_ID.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.SESSION_TYPE_DEFAULT_TIME.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.SESSION_TYPE_PROGRAM_ID.getName()));
            value = values.getAsString(Columns.SESSION_TYPE_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }
}

